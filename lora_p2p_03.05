#include <TimeLib.h>
#include <Time.h>
#include <stdint.h>
#include <string.h>

bool rx_done = false;
double myFreq = 868000000;
uint16_t sf = 12, bw = 0, cr = 0, preamble = 8, txPower = 22;

time_t t;
struct tm *tm;

/*
  typedef struct rui_lora_p2p_revc {
  // Pointer to the received data stream
  uint8_t *Buffer;
  // Size of the received data stream
  uint8_t BufferSize;
  // Rssi of the received packet
  int16_t Rssi;
  // Snr of the received packet
  int8_t Snr;
  } rui_lora_p2p_recv_t;
*/

// GPS verilerini tutmak için struct tanımlaması
struct GPSData {
    float latitude;
    float longitude;
} location;

/*void MessaPrint(uint8_t *buf, uint64_t len)
{
  for (uint64_t i = 0; i < len; i += 64) {
    if (i % 128 == 0)
      Serial.print(F("  \r\n"));
    char s[] = "                                                                    "; // 64 karakterlik boş bir dizi oluşturuldu.
    uint16_t iy = 0; // Dizi indeksi 0 ile başlatıldı.
    for (uint16_t j = 0; j < 64; j++) {
      if (i + j < len) {
        uint16_t c = buf[i + j];
        if (c > 31 && c < 128 || c == 176)
        s[iy++] = c;
        else
        s[iy++] = '.'; // Basılmayan karakterlerin yerine nokta karakteri kullanıldı.
      }
    }
    Serial.print(s);
  }
}*/

void recv_cb(rui_lora_p2p_recv_t data)
{
    rx_done = true;
    if (data.BufferSize == 0) {
        Serial.println("Empty buffer.");
        return;
    }
    char buff[92];
    sprintf(buff, "Incoming message, length: %d, RSSI: %d, SNR: %d",
  	    data.BufferSize, data.Rssi, data.Snr);
    Serial.println(buff);
    Serial.print("\r\n");

    GPSData received_location;
    memcpy(&received_location, data.Buffer, sizeof(GPSData));

    // Dönüştürülen veriyi işle veya kaydet
    Serial.print("Received Latitude: ");
    Serial.println(received_location.latitude, 6); // 6 haneli ondalık kısım
    Serial.print("Received Longitude: ");
    Serial.println(received_location.longitude, 6); 
    Serial.print("\r\n");
    Serial.printf("Incoming message has been read.\r\n");

    //MessaPrint(data.Buffer, data.BufferSize);
}

void send_cb(void)
{
    Serial.printf("P2P set Rx mode %s\r\n",
		api.lorawan.precv(65534) ? "Success" : "Fail");
}

void setup()
{
    Serial.begin(115200);
    delay(2000);
    
    if(api.lorawan.nwm.get() != 0)
    {
        Serial.printf("Set Node device work mode %s\r\n",
            api.lorawan.nwm.set(0) ? "Success" : "Fail");
        api.system.reboot();
    }

    Serial.printf("Set P2P mode frequency %3.3f: %s\r\n", (myFreq / 1e6),
  		api.lorawan.pfreq.set(myFreq) ? "Success" : "Fail");
    Serial.printf("Set P2P mode spreading factor %d: %s\r\n", sf,
  		api.lorawan.psf.set(sf) ? "Success" : "Fail");
    Serial.printf("Set P2P mode bandwidth %d: %s\r\n", bw,
  		api.lorawan.pbw.set(bw) ? "Success" : "Fail");
    Serial.printf("Set P2P mode code rate 4/%d: %s\r\n", (cr + 5),
  		api.lorawan.pcr.set(cr) ? "Success" : "Fail");
    Serial.printf("Set P2P mode preamble length %d: %s\r\n", preamble,
  		api.lorawan.ppl.set(preamble) ? "Success" : "Fail");
    Serial.printf("Set P2P mode tx power %d: %s\r\n", txPower,
  		api.lorawan.ptp.set(txPower) ? "Success" : "Fail");

    api.lorawan.registerPRecvCallback(recv_cb);
    api.lorawan.registerPSendCallback(send_cb);

    Serial.printf("P2P set Rx mode %s\r\n",
  		api.lorawan.precv(65534) ? "Success" : "Fail");
    // let's kick-start things by waiting 2 seconds.

}

void loop()
{
    uint8_t message[] = "Hello World";
    bool send_result = false;

    if (rx_done) {
        rx_done = false;
        while (!send_result) {
            send_result = api.lorawan.psend(sizeof(message), message);
            Serial.printf("P2P send %s\r\n", send_result ? "Success" : "Fail");
            if (!send_result) {
                Serial.printf("P2P finish Rx mode %s\r\n", api.lorawan.precv(0) ? "Success" : "Fail");
//}
                delay(1000);
//10.08 - 00.30

                t = now();
                tm = localtime(&t);
                char timeStr[20];
                strftime(timeStr, sizeof(timeStr), "%H:%M:%S", tm);
                Serial.println(timeStr);
                Serial.print("\r\n");
            }
        }
    }

    delay(500);
}
